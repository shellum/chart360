<!DOCTYPE html>
<html>

<head>
  <script>
    var overallMargin = 10;
    var embeddedYMargin = 25;
    var textMargin = 10;
    var overallWidth = 800;
    var overallHeight = 100;
    var extraTextSpacing = 5;
    var outerColor = "#0000aa";
    var gradientOuterColor = "rgb(0,180,240)";
    var gradientInnerColor = "rgb(77,255,255)"
    var textColor = "#444444";
    var managerColor = "rgb(0,180,0)";
    var selfColor = "rgb(108,108,108)";
    var maxI = 10;
    var fontSize = 15;
    var attribute = "";

    function draw(_attribute) {
       attribute = _attribute;
       rect(overallMargin,overallMargin,0, overallWidth,overallHeight,outerColor,false);
       var peerAverage = getPeerAverage();
       console.log("peerAverage: " + peerAverage);
       console.log("peerMin: " + getPeerLow());
       console.log("peerMax: " + getPeerHigh());
       var peerLowCoordinate = getNumericMargin(peerAverage);
       console.log("peerMargin is " + peerLowCoordinate);
       var xMargin = 0;
       var yMargin = overallMargin + embeddedYMargin
       var xOffset = getNumericMargin(getPeerLow()) + fontSize/3;
       var width = getNumericMargin(getPeerHigh()) - getNumericMargin(getPeerLow());
       var height = 30;
       rect(xMargin, yMargin, xOffset, width, height, "", true);
       text();
       drawMarkerLine(getManagerRating(),managerColor);
       drawMarkerLine(getSelfRating(),selfColor);

    }

    function drawMarkerLine(rating,color) {
      var x = getNumericMargin(rating) + fontSize/3;
      console.log("managerRating: " + rating);
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(x, overallMargin + 10);
        ctx.lineTo(x, 75);
        ctx.stroke();
      }
    }

    function getManagerRating() {
      var managerRating = document.getElementById(attribute + "ManagerRating").value;
      return parseInt(managerRating);
    }

    function getSelfRating() {
      var selfRating = document.getElementById(attribute + "SelfRating").value;
      return parseInt(selfRating);
    }

    function getPeerAverage() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      var total = 0.0;
      peerArray.map(function(peerValue) {
        total += parseFloat(peerValue);
      });
      return (total / peerArray.length).toFixed(1);
    }

    function getPeerHigh() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      return Math.max.apply(Math, peerArray);
    }

    function getPeerLow() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      return Math.min.apply(Math, peerArray);
    }

    function text() {
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
        ctx.fillStyle=textColor;
        ctx.font=fontSize + "px Helvetica";
        for(var i=1;i<=maxI;i++) {
          ctx.fillText(i,getNumericMargin(i),overallHeight);
          console.log("writing " + i + " at " + getNumericMargin(i));
        }
        ctx.fillText(attribute,getNumericMargin(1),overallMargin+embeddedYMargin);
      }
    }

    function getNumericMargin(i) {
      return overallMargin+textMargin+(i-1)*((overallWidth/maxI)+extraTextSpacing);
    }

    function rect(xMargin,yMargin,x, width,height,color,fill) {
      console.log("rect at " + (xMargin+x) + " , " + width+", " + height);
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");

        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        if (fill) {
          var gradient = ctx.createLinearGradient(xMargin+x, yMargin, xMargin+x+width, yMargin+height);

          // x  ave - low
          // -  ---------
          // 1  high - low

          var colorSpikeStop = (getPeerAverage() - getPeerLow()) / (getPeerHigh() - getPeerLow());

          gradient.addColorStop(0, gradientOuterColor);
          gradient.addColorStop(colorSpikeStop, gradientInnerColor);
          gradient.addColorStop(1.0, gradientOuterColor);

          ctx.fillStyle = gradient;
          ctx.fillRect (xMargin+x,yMargin,width,height);
        }
        else {
          ctx.strokeRect (xMargin+x,yMargin,width,height);
        }
      }
    }
  </script>
</head>

<body onload="draw('kind');">
  Kind - Peer Ratings (CSV): <input type="text" value="6,4,9,3" id="kindPeerRatings"/><br/>
  Kind - Self Rating: <input type="text" value="7" id="kindSelfRating"/><br/>
  Kind - Manager Rating: <input type="text" value="4" id="kindManagerRating"/><br/>
  <button onclick="draw('kind');">Draw</button><br/>
  <canvas id="kindCanvas" width="1100" height="150"></canvas>
  <br/><br/>
</body>

</html>
