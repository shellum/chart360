<!DOCTYPE html>
<html>

<head>
  <script>
  // Nuclear Programming at its finest!
    var overallMargin = 10;
    var embeddedYMargin = 25;
    var textMargin = 10;
    var overallWidth = 800;
    var overallHeight = 100;
    var extraTextSpacing = 5;
    var outerColor = "#0000aa";
    var gradientOuterColor = "rgb(0,180,240)";
    var gradientInnerColor = "rgb(77,255,255)"
    var textColor = "#444444";
    var managerColor = "rgb(0,180,0)";
    var selfColor = "rgb(108,108,108)";
    var maxI = 10;
    var fontSize = 15;
    var selfRatingMarkerDepth = 55;
    var managerRatingMarkerDepth = 0;
    var attribute = "";
    var font = "Helvetica";
    var fontCenterOffset = fontSize/3;

    function draw(_attribute) {
       attribute = _attribute;
       rect(overallMargin,overallMargin,0, overallWidth,overallHeight,outerColor,false);
       var peerAverage = getPeerAverage();
       console.log("peerAverage: " + peerAverage);
       console.log("peerMin: " + getPeerLow());
       console.log("peerMax: " + getPeerHigh());
       var peerLowCoordinate = getNumericMargin(peerAverage);
       console.log("peerMargin is " + peerLowCoordinate);
       var xMargin = 0;
       var yMargin = overallMargin + embeddedYMargin
       var xOffset = getNumericMargin(getPeerLow()) + fontCenterOffset;
       var width = getNumericMargin(getPeerHigh()) - getNumericMargin(getPeerLow());
       if (width == 0) {
         xOffset = getNumericMargin(getPeerLow() - 0.2) + fontCenterOffset;
         width = getNumericMargin(getPeerHigh() + 0.2) - getNumericMargin(getPeerLow() - 0.2);
       }
       var height = 30;
       rect(xMargin, yMargin, xOffset, width, height, "", true);
       text();
       drawMarkerLine(getManagerRating(),managerColor,managerRatingMarkerDepth);
       drawMarkerLine(getSelfRating(),selfColor,selfRatingMarkerDepth);

    }

    function drawMarkerLine(rating,color,y) {
      var x = getNumericMargin(rating) + fontSize/3;
      console.log("managerRating: " + rating);
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        ctx.lineWidth = 3;
        ctx.beginPath();
        if (y != 0) y-=(overallMargin+10);
        ctx.moveTo(x, overallMargin + 10 + y);
        ctx.lineTo(x, y+45);
        console.log("plotting: " + (overallMargin + 10 + y) + " to " + (y+45) );
        ctx.stroke();
      }
    }

    function getManagerRating() {
      var managerRating = document.getElementById(attribute + "ManagerRating").value;
      return parseInt(managerRating);
    }

    function getSelfRating() {
      var selfRating = document.getElementById(attribute + "SelfRating").value;
      return parseInt(selfRating);
    }

    function getPeerAverage() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      var total = 0.0;
      peerArray.map(function(peerValue) {
        total += parseFloat(peerValue);
      });
      return (total / peerArray.length).toFixed(1);
    }

    function getPeerHigh() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      return Math.max.apply(Math, peerArray);
    }

    function getPeerLow() {
      var peerValues = document.getElementById(attribute + "PeerRatings").value;
      var peerArray = peerValues.split(",");
      return Math.min.apply(Math, peerArray);
    }

    function text() {
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");
        ctx.fillStyle=textColor;
        ctx.font=fontSize + "px " + font;
        for(var i=1;i<=maxI;i++) {
          ctx.fillText(i,getNumericMargin(i),overallHeight);
          console.log("writing " + i + " at " + getNumericMargin(i));
        }
        ctx.fillText(attribute,getNumericMargin(1),overallMargin+embeddedYMargin);
      }
    }

    function getNumericMargin(i) {
      return overallMargin+textMargin+(i-1)*((overallWidth/maxI)+extraTextSpacing);
    }

    function rect(xMargin,yMargin,x, width,height,color,fill) {
      console.log("rect at " + (xMargin+x) + " , " + width+", " + height);
      var canvas = document.getElementById(attribute + "Canvas");
      if (canvas.getContext) {
        var ctx = canvas.getContext("2d");

        ctx.fillStyle = color;
        ctx.strokeStyle = color;
        if (fill) {
          var colorSpikeStop = (getPeerAverage() - getPeerLow()) / (getPeerHigh() - getPeerLow());
          if (isNaN(colorSpikeStop)) colorSpikeStop = 0.5;


          drawGradient(xMargin+x,yMargin,width,height,colorSpikeStop,ctx);
        }
        else {
          ctx.strokeRect (xMargin+x,yMargin,width,height);
        }
      }
    }

    function drawGradient(startX,startY,width,height,colorSpikeStop,ctx) {
      var gradient = ctx.createLinearGradient(startX,startY, startX+width, startY+height);
      gradient.addColorStop(0, gradientOuterColor);
      gradient.addColorStop(colorSpikeStop-0.2, gradientOuterColor);
      gradient.addColorStop(colorSpikeStop, gradientInnerColor);
      gradient.addColorStop(colorSpikeStop+0.2, gradientOuterColor);
      gradient.addColorStop(1.0, gradientOuterColor);
      ctx.fillStyle = gradient;
      ctx.fillRect (startX,startY,width,height);
    }

    function addControls(_attribute) {
      var br = document.createElement("br");
      var peerRatingsBox = document.createElement("input");
      peerRatingsBox.setAttribute("type","text");
      peerRatingsBox.setAttribute("id",_attribute+"PeerRatings")
      var peerRatingsDesc = document.createTextNode(_attribute+" - Peer Ratings (CSV):");

      var managerRatingBox = document.createElement("input");
      managerRatingBox.setAttribute("type","text");
      managerRatingBox.setAttribute("id",_attribute+"ManagerRating")
      var managerRatingDesc = document.createTextNode(_attribute+" - Manager Rating:");

      var selfRatingBox = document.createElement("input");
      selfRatingBox.setAttribute("type","text");
      selfRatingBox.setAttribute("id",_attribute+"SelfRating")
      var selfRatingDesc = document.createTextNode(_attribute+" - Self Rating:");

      var canvas = document.createElement("canvas");
      canvas.setAttribute("width","1100");
      canvas.setAttribute("height","150");
      canvas.setAttribute("id",_attribute + "Canvas");

      var controlMarker = document.getElementById("controlMarker");
      var canvasMarker = document.getElementById("canvasMarker");
      document.body.insertBefore(peerRatingsDesc, controlMarker);
      document.body.insertBefore(peerRatingsBox, controlMarker);
      document.body.insertBefore(document.createElement("br"), controlMarker);
      document.body.insertBefore(managerRatingDesc, controlMarker);
      document.body.insertBefore(managerRatingBox, controlMarker);
      document.body.insertBefore(document.createElement("br"), controlMarker);
      document.body.insertBefore(selfRatingDesc, controlMarker);
      document.body.insertBefore(selfRatingBox, controlMarker);
      document.body.insertBefore(document.createElement("br"), controlMarker);
      document.body.insertBefore(canvas,canvasMarker);
    }
    function drawKey() {
      var exampleCounterStart = 4;
      var exampleCounterEnd = 8;
      var counterTranslate = -2;
      var canvas = document.getElementById("keyCanvas");
      if (canvas.getContext) {
        // Setup
        var ctx = canvas.getContext("2d");
        attribute = "key";
        ctx.font=fontSize + "px " + font;

        // Outside border
        rect(overallMargin,overallMargin,0, overallWidth,overallHeight,outerColor,false);

        // Peer review example data gradient
        var gradientStart = getNumericMargin(3) + fontCenterOffset;
        var gradientWidth = getNumericMargin(5) - getNumericMargin(3);
        drawGradient(gradientStart,50,gradientWidth,30,0.25,ctx);

        ctx.fillStyle=textColor;
        ctx.fillText("Peer Reviews",220+fontSize,45+embeddedYMargin);

        ctx.fillStyle=textColor;
        ctx.fillText("EXAMPLE", getNumericMargin(1),overallMargin+embeddedYMargin);

        // Start a key counter for peer reviews, but translate it to the right
        for(var i=exampleCounterStart;i<=exampleCounterEnd;i++)
          ctx.fillText(i,getNumericMargin(i+counterTranslate),overallHeight);

        // Explain the key counter, aligning with fake data
        ctx.fillStyle=gradientOuterColor;
        ctx.fillText("Low",getNumericMargin(3),overallMargin+embeddedYMargin);
        ctx.fillText("Avg",getNumericMargin(3.5),overallMargin+embeddedYMargin);
        ctx.fillText("High",getNumericMargin(5),overallMargin+embeddedYMargin);

        // To the right of the counter, show an example of manager and self rating
        drawMarkerLine(8,managerColor,managerRatingMarkerDepth);
        ctx.fillText("<- Manager Rating",getNumericMargin(8.1),overallMargin+embeddedYMargin);
        drawMarkerLine(8, selfColor,selfRatingMarkerDepth);
        ctx.fillText("<- Self Rating",getNumericMargin(8.1),45+embeddedYMargin);
      }
    }
    var types=['Is Kind','Helps','Codes Cleanly','Tests','Automates','Iterates'];
    function init() {
      types.map(function(t) {
        addControls(t);
      });
      drawKey();
    }
  </script>
</head>

<body onload="init();">
  <div id="controlMarker"></div>
  <button onclick="types.map(function(t) {draw(t);});">Draw</button><br/>
  <canvas id="keyCanvas" width="1100" height="150"/></canvas>
  <div id="canvasMarker"></div>
</body>

</html>
